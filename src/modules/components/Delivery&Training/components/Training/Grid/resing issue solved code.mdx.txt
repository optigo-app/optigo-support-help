import React, { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
import { DataGrid } from "@mui/x-data-grid";


const TrainGrid = ({ deliveryData, setPageSize, pageSize, columns, sortModel, setSortModel }) => {
  const containerRef = useRef(null);
  const [elementVisible, setElementVisible] = useState(false);
  const [tabVisible, setTabVisible] = useState(true);
  const [containerWidth, setContainerWidth] = useState(0);

  useLayoutEffect(() => {
    const updateWidth = () => {
      if (containerRef.current) {
        setContainerWidth(containerRef.current.offsetWidth);
      }
    };

    const resizeObserver = new ResizeObserver(updateWidth);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
      updateWidth();
    }

    return () => resizeObserver.disconnect();
  }, []);

  useEffect(() => {

    console.log(containerRef  , "containerRef")
    const observer = new IntersectionObserver(
      ([entry]) => {
        const isVisible = entry.isIntersecting;
        if (isVisible !== elementVisible) {
          setElementVisible(isVisible);
          triggerAlert(isVisible, tabVisible);
        }
      },
      { threshold: 0.1 }
    );

    const currentRef = containerRef.current;

    if (currentRef) {
      observer.observe(currentRef);
    }

    return () => {
      if (currentRef) observer.unobserve(currentRef);
    };
  }, [elementVisible, tabVisible]);

  // Track browser tab visibility
  useEffect(() => {
    const handleVisibilityChange = () => {
      const isVisible = document.visibilityState === "visible";
      if (isVisible !== tabVisible) {
        window.dispatchEvent(new Event('resize'));
        setTabVisible(isVisible);
        triggerAlert(elementVisible, isVisible);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [elementVisible, tabVisible]);

  const triggerAlert = (isElementVisible, isTabVisible) => {
    if (isElementVisible && isTabVisible) {
      console.log("Grid and tab are now visible");
      console.log("Grid and tab are now visible");
      const originalWidth = window.innerWidth;
      window.dispatchEvent(new Event("resize"));
      document.body.style.transition = "all 0.1s";
      document.body.style.transform = "scale(0.9999)";
      setTimeout(() => {
        document.body.style.transform = "scale(1)";
      }, 10);
      setElementVisible(true)
    } else if (!isElementVisible) {
      console.log("Grid is no longer in view");
      setElementVisible(false);
    } else if (!isTabVisible) {
      console.log("Browser tab is now hidden");
      setTabVisible(false);
    }
  };

  const responsiveColumns = useMemo(() => {
    if (!containerWidth) return columns;
    
    return columns.map(col => ({
      ...col,
      // Calculate width based on container size
      width: col.flex ? Math.floor((containerWidth * col.flex) / 10) : col.width,
      flex: undefined, // Remove flex to use calculated width
    }));
  }, [columns, containerWidth]);


  return (

    <DataGrid
      ref={containerRef}
      className={`grid-wrapper ${elementVisible ? 'visible' : ''}`}
      getRowId={(row) => row.SessionID}
      rows={deliveryData}
      columns={responsiveColumns}
      pageSize={pageSize}
      onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}
      rowsPerPageOptions={[15, 25, 50, 100]}
      sortModel={sortModel}
      onSortModelChange={(model) => setSortModel(model)}
      disableSelectionOnClick
      rowHeight={50}
      loading={false}
      density="standard"
      sx={{
        "& .MuiDataGrid-row": {
          alignItems: "center",
        },
        "& .MuiDataGrid-cell": {
          fontSize: "0.875rem",
          display: "flex",
          alignItems: "center",
        },
        "& .MuiTablePagination-root": {
          overflow: "visible",
        },
        "& .MuiDataGrid-toolbarContainer": {
          padding: "8px 16px",
          backgroundColor: "#fff",
          borderBottom: "1px solid #f0f0f0",
        },
      }}
    />
  );
};

export default TrainGrid;


// import React, { useEffect, useRef, useState, useCallback } from "react";
// import { DataGrid } from "@mui/x-data-grid";

// const TrainGrid = ({ deliveryData, setPageSize, pageSize, columns, sortModel, setSortModel }) => {
//   const containerRef = useRef(null);
//   const [elementVisible, setElementVisible] = useState(false);
//   const [tabVisible, setTabVisible] = useState(true);
//   const [columnWidths, setColumnWidths] = useState({});
//   const [isInitialized, setIsInitialized] = useState(false);

//   // Store initial column widths
//   useEffect(() => {
//     if (columns && !isInitialized) {
//       const initialWidths = {};
//       columns.forEach(col => {
//         if (col.width) {
//           initialWidths[col.field] = col.width;
//         } else if (col.flex) {
//           // For flex columns, we'll let DataGrid handle them naturally
//           initialWidths[col.field] = null;
//         }
//       });
//       setColumnWidths(initialWidths);
//       setIsInitialized(true);
//     }
//   }, [columns, isInitialized]);

//   // Handle column width changes
//   const handleColumnWidthChange = useCallback((params) => {
//     setColumnWidths(prev => ({
//       ...prev,
//       [params.colDef.field]: params.width
//     }));
//   }, []);

//   useEffect(() => {
//     const observer = new IntersectionObserver(
//       ([entry]) => {
//         const isVisible = entry.isIntersecting;
//         if (isVisible !== elementVisible) {
//           setElementVisible(isVisible);
//           if (isVisible && tabVisible) {
//             // Force DataGrid to recalculate layout without changing column widths
//             setTimeout(() => {
//               if (containerRef.current) {
//                 const event = new CustomEvent('resize', { bubbles: true });
//                 containerRef.current.dispatchEvent(event);
//               }
//             }, 100);
//           }
//         }
//       },
//       { threshold: 0.1 }
//     );

//     const currentRef = containerRef.current;
//     if (currentRef) {
//       observer.observe(currentRef);
//     }

//     return () => {
//       if (currentRef) observer.unobserve(currentRef);
//     };
//   }, [elementVisible, tabVisible]);

//   // Track browser tab visibility
//   useEffect(() => {
//     const handleVisibilityChange = () => {
//       const isVisible = document.visibilityState === "visible";
//       if (isVisible !== tabVisible) {
//         setTabVisible(isVisible);
        
//         if (isVisible && elementVisible) {
//           // Tab became visible - force layout recalculation
//           setTimeout(() => {
//             if (containerRef.current) {
//               // Trigger a gentle resize event
//               window.dispatchEvent(new Event('resize'));
//             }
//           }, 50);
//         }
//       }
//     };

//     document.addEventListener("visibilitychange", handleVisibilityChange);
//     return () => {
//       document.removeEventListener("visibilitychange", handleVisibilityChange);
//     };
//   }, [elementVisible, tabVisible]);

//   // Enhanced columns with preserved widths
//   const enhancedColumns = React.useMemo(() => {
//     return columns.map(col => ({
//       ...col,
//       // Preserve stored width if available
//       ...(columnWidths[col.field] && { width: columnWidths[col.field] }),
//       // Disable auto-sizing for non-flex columns
//       resizable: col.resizable !== false,
//     }));
//   }, [columns, columnWidths]);

//   return (
//     <div 
//       ref={containerRef}
//       style={{ 
//         height: '100%', 
//         width: '100%',
//         minHeight: 400,
//         // Ensure container maintains size during tab switches
//         visibility: tabVisible ? 'visible' : 'visible',
//         opacity: tabVisible ? 1 : 1
//       }}
//     >
//       <DataGrid
//         className={`grid-wrapper ${elementVisible ? 'visible' : ''}`}
//         getRowId={(row) => row.SessionID}
//         rows={deliveryData}
//         columns={enhancedColumns}
//         pageSize={pageSize}
//         onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}
//         rowsPerPageOptions={[15, 25, 50, 100]}
//         sortModel={sortModel}
//         onSortModelChange={(model) => setSortModel(model)}
//         onColumnWidthChange={handleColumnWidthChange}
//         disableSelectionOnClick
//         rowHeight={50}
//         loading={false}
//         density="standard"
//         // Disable column auto-sizing
//         disableColumnResize={false}
//         // Keep column menu for manual resize
//         disableColumnMenu={false}
//         sx={{
//           height: '100%',
//           width: '100%',
//           "& .MuiDataGrid-root": {
//             // Prevent layout shifts
//             minWidth: 0,
//           },
//           "& .MuiDataGrid-main": {
//             // Ensure main container doesn't collapse
//             minHeight: 0,
//           },
//           "& .MuiDataGrid-row": {
//             alignItems: "center",
//           },
//           "& .MuiDataGrid-cell": {
//             fontSize: "0.875rem",
//             display: "flex",
//             alignItems: "center",
//             // Prevent text overflow issues during resize
//             overflow: "hidden",
//             textOverflow: "ellipsis",
//             whiteSpace: "nowrap",
//           },
//           "& .MuiDataGrid-columnHeader": {
//             // Prevent header from changing size
//             minWidth: 0,
//           },
//           "& .MuiTablePagination-root": {
//             overflow: "visible",
//           },
//           "& .MuiDataGrid-toolbarContainer": {
//             padding: "8px 16px",
//             backgroundColor: "#fff",
//             borderBottom: "1px solid #f0f0f0",
//           },
//           // Prevent column auto-sizing on visibility change
//           "& .MuiDataGrid-columnsContainer": {
//             minWidth: "100%",
//           },
//         }}
//       />
//     </div>
//   );
// };

// export default TrainGrid;